    private lateinit var viewPager: ViewPager2
    //Handler() - is deprecated
    private val sliderHandler = Handler()
    private val sliderRunnable = Runnable {fakeDrag(viewPager, true, 5000, 1)}
    
       
       viewPager = binding.mainPageViewPager
        //TODO : Get pictures from the dataBase
        val sliderItems: MutableList<Review> = ArrayList()
        //TODO : Get pictures from dataBase
        viewPagerSettings(sliderItems)
   
    private fun viewPagerSettings(sliderItems: MutableList<Review>) {
        viewPager.adapter = SliderAdapter(sliderItems, viewPager)
        viewPager.getChildAt(0).overScrollMode = RecyclerView.OVER_SCROLL_NEVER
        with(viewPager) {
        //cube page transformer
            setPageTransformer { page, position ->
                if (position < 0f) {
                    page.pivotX = page.width.toFloat()
                } else {
                    page.pivotX = 0f
                }
                page.pivotY = page.height * 0.5f;
                page.rotationY = 90f * position;
            }
            registerOnPageChangeCallback(object : OnPageChangeCallback() {
                override fun onPageSelected(position: Int) {
                    super.onPageSelected(position)
                    sliderHandler.removeCallbacks(sliderRunnable)
                    //duration before starting slide the image
                    sliderHandler.postDelayed(sliderRunnable, 4000)
                }
            })
        }
    }
   
   private fun fakeDrag(viewPager: ViewPager2, leftToRight: Boolean, duration: Long, numberOfPages: Int) {
        val pxToDrag: Int = viewPager.width
        val animator = ValueAnimator.ofInt(0, pxToDrag)
        var previousValue = 0
        animator.addUpdateListener { valueAnimator ->
            val currentValue = valueAnimator.animatedValue as Int
            var currentPxToDrag: Float = (currentValue - previousValue).toFloat() * numberOfPages
            when {
                leftToRight -> {
                    currentPxToDrag *= -1
                }
            }
            viewPager.fakeDragBy(currentPxToDrag)
            previousValue = currentValue
        }
        animator.addListener(object : Animator.AnimatorListener {
            override fun onAnimationStart(animation: Animator?) { viewPager.beginFakeDrag() }
            override fun onAnimationEnd(animation: Animator?) { viewPager.endFakeDrag() }
            override fun onAnimationCancel(animation: Animator?) { }
            override fun onAnimationRepeat(animation: Animator?) { }
        })
        animator.interpolator = AccelerateDecelerateInterpolator()
        animator.duration = duration
        animator.start()
    }
    
        override fun onPause() {
        super.onPause()
        sliderHandler.postDelayed(sliderRunnable, 3000)
    }

    override fun onResume() {
        super.onResume()
        sliderHandler.postDelayed(sliderRunnable, 3000)
    }
